import cv2 as cv
import numpy as np
import os
import optuna
import yaml

def tuning(
        trial,
        metadata_path,
        preprocess_path
        ):
    """
    Hyperparameter tuner for colony detection

    Keyword arguments:
    trial -- parameter passed to Optuna.
    metadata_path -- path to the .yaml files with the correct colony counts; generated by read_pdf.py.
    preprocess_path -- path to the preprocessed dishes.
    """
    data = {} # Initialises data dict

    for file in os.listdir(metadata_path):
        if file.endswith(".yaml"):
            with open(os.path.join(metadata_path, file), "r") as f:
                data[os.path.splitext(file)[0]] = yaml.safe_load(f)
    """
    Above loop reads the metadata .yaml file. It assigns the colony counts for each dish and each file. Example:
    22.09.2025
        WT1_P1:225
        WT1_P2:129
        WT1_P3:182
    23.09.2025
        WT1_P1:225
        WT1_P2:129
        WT1_P3:182
    ...

    """

    flat_data = { # Flattens the data dict to get a dict matching the file names, e.g.: {22.09.2025_WT1_P1:225}
        f"{date}_{key}":colonies
        for date, inner in data.items()
        for key, colonies in inner.items()
    }

    params = cv.SimpleBlobDetector_Params() # Intializes params for the detector and passes the ones to be tuned to optuna
    params.minThreshold = 0
    params.maxThreshold = trial.suggest_int("maxThreshold", 0, 255)
    params.thresholdStep = trial.suggest_float("thresholdStep", 0, 50)
    params.filterByArea = True
    params.minArea = 100
    params.maxArea = 1000
    params.filterByColor = True
    params.blobColor = 0
    params.filterByCircularity = True
    params.minCircularity = trial.suggest_float("minCircularity", 0, 1)
    params.filterByConvexity = True
    params.minConvexity = trial.suggest_float("minConvexity", 0, 1)
    params.filterByInertia = True
    params.minInertiaRatio = trial.suggest_float("minInertiaRatio", 0, 1)

    detector = cv.SimpleBlobDetector_create(params) # Creates detector object

    y_true = [] # Initializes lists with true values (from metadata file) and predicted values (from the detector)
    y_pred = []

    for file_id, true_count in flat_data.items(): # Flat data dict contains the file name and the true colony count
        pre_img_path = os.path.join(preprocess_path, f"{file_id}.jpg") # Reads the associated preprocessed image
        pre_img = cv.imread(pre_img_path, cv.IMREAD_GRAYSCALE)

        blobs = detector.detect(pre_img) # Detects colonies

        y_true.append(true_count) # Redundant? flat_data contains it 
        y_pred.append(len(blobs)) # Adds predicted colony counts to list
    
    # Calculates mean relative error for the entire input.
    rel_errors = [abs(p - t)/t for p, t in zip(y_pred, y_true)]
    mean_rel_error = sum(rel_errors)/len(rel_errors)

    return mean_rel_error

metadata_path=r"C:\Users\jakub\Documents\Bachelorarbeit\Code\160925\FromPDF"
preprocess_path=r"C:\Users\jakub\Documents\Bachelorarbeit\Code\160925\Preprocessing\Training"

study = optuna.create_study(direction="minimize")

study.optimize(
    lambda trial: tuning(trial, metadata_path, preprocess_path), n_trials=50, n_jobs=-1
)

print("Best parameters:", study.best_params)
print("Best score in %:", study.best_value*100)